#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from com.lexjishu.thrift.yy import UserService
from com.lexjishu.thrift.yy.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('   findVirtualGroup()')
  print('  bool insterVirtualGroup(GroupList glist)')
  print('   findVirtual(string groupid, string name, string remark, i32 start, i32 count)')
  print('  bool insertVirtual(User user)')
  print('  bool insertOrEditVirtual(User user)')
  print('  bool findUserById(string userId)')
  print('  bool hideVirtual(string vid, i32 hide)')
  print('  bool stopVirtual(string vid, i32 stop)')
  print('   findGroup()')
  print('  bool insterGroup(GroupList group)')
  print('  bool editGroup( groupList)')
  print('   findUser(string groupId, string nickName, string mobile, string startSign, string endSign, i32 start, i32 count)')
  print('  bool setGroup(string uid, string group)')
  print('  bool stopUser(string uid, i32 day)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = UserService.Client(protocol)
transport.open()

if cmd == 'findVirtualGroup':
  if len(args) != 0:
    print('findVirtualGroup requires 0 args')
    sys.exit(1)
  pp.pprint(client.findVirtualGroup())

elif cmd == 'insterVirtualGroup':
  if len(args) != 1:
    print('insterVirtualGroup requires 1 args')
    sys.exit(1)
  pp.pprint(client.insterVirtualGroup(eval(args[0]),))

elif cmd == 'findVirtual':
  if len(args) != 5:
    print('findVirtual requires 5 args')
    sys.exit(1)
  pp.pprint(client.findVirtual(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'insertVirtual':
  if len(args) != 1:
    print('insertVirtual requires 1 args')
    sys.exit(1)
  pp.pprint(client.insertVirtual(eval(args[0]),))

elif cmd == 'insertOrEditVirtual':
  if len(args) != 1:
    print('insertOrEditVirtual requires 1 args')
    sys.exit(1)
  pp.pprint(client.insertOrEditVirtual(eval(args[0]),))

elif cmd == 'findUserById':
  if len(args) != 1:
    print('findUserById requires 1 args')
    sys.exit(1)
  pp.pprint(client.findUserById(args[0],))

elif cmd == 'hideVirtual':
  if len(args) != 2:
    print('hideVirtual requires 2 args')
    sys.exit(1)
  pp.pprint(client.hideVirtual(args[0],eval(args[1]),))

elif cmd == 'stopVirtual':
  if len(args) != 2:
    print('stopVirtual requires 2 args')
    sys.exit(1)
  pp.pprint(client.stopVirtual(args[0],eval(args[1]),))

elif cmd == 'findGroup':
  if len(args) != 0:
    print('findGroup requires 0 args')
    sys.exit(1)
  pp.pprint(client.findGroup())

elif cmd == 'insterGroup':
  if len(args) != 1:
    print('insterGroup requires 1 args')
    sys.exit(1)
  pp.pprint(client.insterGroup(eval(args[0]),))

elif cmd == 'editGroup':
  if len(args) != 1:
    print('editGroup requires 1 args')
    sys.exit(1)
  pp.pprint(client.editGroup(eval(args[0]),))

elif cmd == 'findUser':
  if len(args) != 7:
    print('findUser requires 7 args')
    sys.exit(1)
  pp.pprint(client.findUser(args[0],args[1],args[2],args[3],args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'setGroup':
  if len(args) != 2:
    print('setGroup requires 2 args')
    sys.exit(1)
  pp.pprint(client.setGroup(args[0],args[1],))

elif cmd == 'stopUser':
  if len(args) != 2:
    print('stopUser requires 2 args')
    sys.exit(1)
  pp.pprint(client.stopUser(args[0],eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
