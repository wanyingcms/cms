#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from com.lexjishu.thrift.yy import SystemService
from com.lexjishu.thrift.yy.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('   findSensitive()')
  print('  string addSensitive( words)')
  print('  string delSensitive( words)')
  print('  string updateAbout(string webContent, string appContent)')
  print('  string findAbout(i32 webOrMob)')
  print('  string findService()')
  print('  string udpateService(string content)')
  print('  string publishNewAppVersion(Version appversion)')
  print('   findHistoryVersions(string os, string vnum, string canal, string remark, string describe, i64 timeStart, i64 timeEnd, i32 start, i32 count)')
  print('  string udpateAppversion(Version versions)')
  print('   findAllSysMesg(i64 staTime, i64 endTime, string content, i32 start, i32 count)')
  print('  string addEditSysMesg(i64 cdate, i32 types, string userGroup, string content)')
  print('   findAdvice(string uid, string mobile, i64 timeBegin, i64 timeEnd, string content, i32 start, i32 count)')
  print('  string holdReport(string pid, i32 types)')
  print('  string hideQuesOrAns(string type, string id, i32 hide)')
  print('   findReports(i32 isdeal, i32 quesAns, string groupId, string themeIds, i64 startTime, i64 endtime, i64 shareStart, i64 shareEnd, i64 repStart, i64 repEnd, i32 start, i32 count)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SystemService.Client(protocol)
transport.open()

if cmd == 'findSensitive':
  if len(args) != 0:
    print('findSensitive requires 0 args')
    sys.exit(1)
  pp.pprint(client.findSensitive())

elif cmd == 'addSensitive':
  if len(args) != 1:
    print('addSensitive requires 1 args')
    sys.exit(1)
  pp.pprint(client.addSensitive(eval(args[0]),))

elif cmd == 'delSensitive':
  if len(args) != 1:
    print('delSensitive requires 1 args')
    sys.exit(1)
  pp.pprint(client.delSensitive(eval(args[0]),))

elif cmd == 'updateAbout':
  if len(args) != 2:
    print('updateAbout requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateAbout(args[0],args[1],))

elif cmd == 'findAbout':
  if len(args) != 1:
    print('findAbout requires 1 args')
    sys.exit(1)
  pp.pprint(client.findAbout(eval(args[0]),))

elif cmd == 'findService':
  if len(args) != 0:
    print('findService requires 0 args')
    sys.exit(1)
  pp.pprint(client.findService())

elif cmd == 'udpateService':
  if len(args) != 1:
    print('udpateService requires 1 args')
    sys.exit(1)
  pp.pprint(client.udpateService(args[0],))

elif cmd == 'publishNewAppVersion':
  if len(args) != 1:
    print('publishNewAppVersion requires 1 args')
    sys.exit(1)
  pp.pprint(client.publishNewAppVersion(eval(args[0]),))

elif cmd == 'findHistoryVersions':
  if len(args) != 9:
    print('findHistoryVersions requires 9 args')
    sys.exit(1)
  pp.pprint(client.findHistoryVersions(args[0],args[1],args[2],args[3],args[4],eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),))

elif cmd == 'udpateAppversion':
  if len(args) != 1:
    print('udpateAppversion requires 1 args')
    sys.exit(1)
  pp.pprint(client.udpateAppversion(eval(args[0]),))

elif cmd == 'findAllSysMesg':
  if len(args) != 5:
    print('findAllSysMesg requires 5 args')
    sys.exit(1)
  pp.pprint(client.findAllSysMesg(eval(args[0]),eval(args[1]),args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'addEditSysMesg':
  if len(args) != 4:
    print('addEditSysMesg requires 4 args')
    sys.exit(1)
  pp.pprint(client.addEditSysMesg(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'findAdvice':
  if len(args) != 7:
    print('findAdvice requires 7 args')
    sys.exit(1)
  pp.pprint(client.findAdvice(args[0],args[1],eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'holdReport':
  if len(args) != 2:
    print('holdReport requires 2 args')
    sys.exit(1)
  pp.pprint(client.holdReport(args[0],eval(args[1]),))

elif cmd == 'hideQuesOrAns':
  if len(args) != 3:
    print('hideQuesOrAns requires 3 args')
    sys.exit(1)
  pp.pprint(client.hideQuesOrAns(args[0],args[1],eval(args[2]),))

elif cmd == 'findReports':
  if len(args) != 12:
    print('findReports requires 12 args')
    sys.exit(1)
  pp.pprint(client.findReports(eval(args[0]),eval(args[1]),args[2],args[3],eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),eval(args[8]),eval(args[9]),eval(args[10]),eval(args[11]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
